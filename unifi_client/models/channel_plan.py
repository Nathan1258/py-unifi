# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from unifi_client.models.channel_plan_ap_blacklisted_channels import ChannelPlanApBlacklistedChannels
from unifi_client.models.channel_plan_coupling import ChannelPlanCoupling
from unifi_client.models.channel_plan_radio_table import ChannelPlanRadioTable
from unifi_client.models.channel_plan_satisfaction_table import ChannelPlanSatisfactionTable
from unifi_client.models.channel_plan_site_blacklisted_channels import ChannelPlanSiteBlacklistedChannels
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ChannelPlan(BaseModel):
    """
    ChannelPlan
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    ap_blacklisted_channels: Optional[List[ChannelPlanApBlacklistedChannels]] = None
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    conf_source: Optional[StrictStr] = None
    coupling: Optional[List[ChannelPlanCoupling]] = None
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    fitness: Optional[Union[StrictFloat, StrictInt]] = None
    note: Optional[StrictStr] = None
    radio: Optional[StrictStr] = None
    radio_table: Optional[List[ChannelPlanRadioTable]] = None
    satisfaction: Optional[Union[StrictFloat, StrictInt]] = None
    satisfaction_table: Optional[List[ChannelPlanSatisfactionTable]] = None
    site_blacklisted_channels: Optional[List[ChannelPlanSiteBlacklistedChannels]] = None
    site_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_id", "ap_blacklisted_channels", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "conf_source", "coupling", "date", "fitness", "note", "radio", "radio_table", "satisfaction", "satisfaction_table", "site_blacklisted_channels", "site_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ChannelPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ap_blacklisted_channels (list)
        _items = []
        if self.ap_blacklisted_channels:
            for _item in self.ap_blacklisted_channels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ap_blacklisted_channels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupling (list)
        _items = []
        if self.coupling:
            for _item in self.coupling:
                if _item:
                    _items.append(_item.to_dict())
            _dict['coupling'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in radio_table (list)
        _items = []
        if self.radio_table:
            for _item in self.radio_table:
                if _item:
                    _items.append(_item.to_dict())
            _dict['radio_table'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in satisfaction_table (list)
        _items = []
        if self.satisfaction_table:
            for _item in self.satisfaction_table:
                if _item:
                    _items.append(_item.to_dict())
            _dict['satisfaction_table'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in site_blacklisted_channels (list)
        _items = []
        if self.site_blacklisted_channels:
            for _item in self.site_blacklisted_channels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['site_blacklisted_channels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ChannelPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "ap_blacklisted_channels": [ChannelPlanApBlacklistedChannels.from_dict(_item) for _item in obj.get("ap_blacklisted_channels")] if obj.get("ap_blacklisted_channels") is not None else None,
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "conf_source": obj.get("conf_source"),
            "coupling": [ChannelPlanCoupling.from_dict(_item) for _item in obj.get("coupling")] if obj.get("coupling") is not None else None,
            "date": obj.get("date"),
            "fitness": obj.get("fitness"),
            "note": obj.get("note"),
            "radio": obj.get("radio"),
            "radio_table": [ChannelPlanRadioTable.from_dict(_item) for _item in obj.get("radio_table")] if obj.get("radio_table") is not None else None,
            "satisfaction": obj.get("satisfaction"),
            "satisfaction_table": [ChannelPlanSatisfactionTable.from_dict(_item) for _item in obj.get("satisfaction_table")] if obj.get("satisfaction_table") is not None else None,
            "site_blacklisted_channels": [ChannelPlanSiteBlacklistedChannels.from_dict(_item) for _item in obj.get("site_blacklisted_channels")] if obj.get("site_blacklisted_channels") is not None else None,
            "site_id": obj.get("site_id")
        })
        return _obj


