# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PortProfile(BaseModel):
    """
    PortProfile
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    autoneg: Optional[StrictBool] = None
    dot1x_ctrl: Optional[StrictStr] = None
    dot1x_idle_timeout: Optional[StrictInt] = None
    egress_rate_limit_kbps: Optional[StrictInt] = None
    egress_rate_limit_kbps_enabled: Optional[StrictBool] = None
    excluded_networkconf_ids: Optional[List[StrictStr]] = None
    forward: Optional[StrictStr] = None
    full_duplex: Optional[StrictBool] = None
    isolation: Optional[StrictBool] = None
    lldpmed_enabled: Optional[StrictBool] = None
    lldpmed_notify_enabled: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    native_networkconf_id: Optional[StrictStr] = None
    op_mode: Optional[StrictStr] = None
    poe_mode: Optional[StrictStr] = None
    port_keepalive_enabled: Optional[StrictBool] = None
    port_security_enabled: Optional[StrictBool] = None
    port_security_mac_address: Optional[List[StrictStr]] = None
    priority_queue1_level: Optional[StrictInt] = None
    priority_queue2_level: Optional[StrictInt] = None
    priority_queue3_level: Optional[StrictInt] = None
    priority_queue4_level: Optional[StrictInt] = None
    setting_preference: Optional[StrictStr] = None
    site_id: Optional[StrictStr] = None
    speed: Optional[StrictInt] = None
    stormctrl_bcast_enabled: Optional[StrictBool] = None
    stormctrl_bcast_level: Optional[StrictInt] = None
    stormctrl_bcast_rate: Optional[StrictInt] = None
    stormctrl_mcast_enabled: Optional[StrictBool] = None
    stormctrl_mcast_level: Optional[StrictInt] = None
    stormctrl_mcast_rate: Optional[StrictInt] = None
    stormctrl_type: Optional[StrictStr] = None
    stormctrl_ucast_enabled: Optional[StrictBool] = None
    stormctrl_ucast_level: Optional[StrictInt] = None
    stormctrl_ucast_rate: Optional[StrictInt] = None
    stp_port_mode: Optional[StrictBool] = None
    tagged_vlan_mgmt: Optional[StrictStr] = None
    voice_networkconf_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_id", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "autoneg", "dot1x_ctrl", "dot1x_idle_timeout", "egress_rate_limit_kbps", "egress_rate_limit_kbps_enabled", "excluded_networkconf_ids", "forward", "full_duplex", "isolation", "lldpmed_enabled", "lldpmed_notify_enabled", "name", "native_networkconf_id", "op_mode", "poe_mode", "port_keepalive_enabled", "port_security_enabled", "port_security_mac_address", "priority_queue1_level", "priority_queue2_level", "priority_queue3_level", "priority_queue4_level", "setting_preference", "site_id", "speed", "stormctrl_bcast_enabled", "stormctrl_bcast_level", "stormctrl_bcast_rate", "stormctrl_mcast_enabled", "stormctrl_mcast_level", "stormctrl_mcast_rate", "stormctrl_type", "stormctrl_ucast_enabled", "stormctrl_ucast_level", "stormctrl_ucast_rate", "stp_port_mode", "tagged_vlan_mgmt", "voice_networkconf_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PortProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PortProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "autoneg": obj.get("autoneg"),
            "dot1x_ctrl": obj.get("dot1x_ctrl"),
            "dot1x_idle_timeout": obj.get("dot1x_idle_timeout"),
            "egress_rate_limit_kbps": obj.get("egress_rate_limit_kbps"),
            "egress_rate_limit_kbps_enabled": obj.get("egress_rate_limit_kbps_enabled"),
            "excluded_networkconf_ids": obj.get("excluded_networkconf_ids"),
            "forward": obj.get("forward"),
            "full_duplex": obj.get("full_duplex"),
            "isolation": obj.get("isolation"),
            "lldpmed_enabled": obj.get("lldpmed_enabled"),
            "lldpmed_notify_enabled": obj.get("lldpmed_notify_enabled"),
            "name": obj.get("name"),
            "native_networkconf_id": obj.get("native_networkconf_id"),
            "op_mode": obj.get("op_mode"),
            "poe_mode": obj.get("poe_mode"),
            "port_keepalive_enabled": obj.get("port_keepalive_enabled"),
            "port_security_enabled": obj.get("port_security_enabled"),
            "port_security_mac_address": obj.get("port_security_mac_address"),
            "priority_queue1_level": obj.get("priority_queue1_level"),
            "priority_queue2_level": obj.get("priority_queue2_level"),
            "priority_queue3_level": obj.get("priority_queue3_level"),
            "priority_queue4_level": obj.get("priority_queue4_level"),
            "setting_preference": obj.get("setting_preference"),
            "site_id": obj.get("site_id"),
            "speed": obj.get("speed"),
            "stormctrl_bcast_enabled": obj.get("stormctrl_bcast_enabled"),
            "stormctrl_bcast_level": obj.get("stormctrl_bcast_level"),
            "stormctrl_bcast_rate": obj.get("stormctrl_bcast_rate"),
            "stormctrl_mcast_enabled": obj.get("stormctrl_mcast_enabled"),
            "stormctrl_mcast_level": obj.get("stormctrl_mcast_level"),
            "stormctrl_mcast_rate": obj.get("stormctrl_mcast_rate"),
            "stormctrl_type": obj.get("stormctrl_type"),
            "stormctrl_ucast_enabled": obj.get("stormctrl_ucast_enabled"),
            "stormctrl_ucast_level": obj.get("stormctrl_ucast_level"),
            "stormctrl_ucast_rate": obj.get("stormctrl_ucast_rate"),
            "stp_port_mode": obj.get("stp_port_mode"),
            "tagged_vlan_mgmt": obj.get("tagged_vlan_mgmt"),
            "voice_networkconf_id": obj.get("voice_networkconf_id")
        })
        return _obj


