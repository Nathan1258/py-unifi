# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SettingUsg(BaseModel):
    """
    SettingUsg
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    arp_cache_base_reachable: Optional[StrictInt] = None
    arp_cache_timeout: Optional[StrictStr] = None
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    broadcast_ping: Optional[StrictBool] = None
    dhcp_relay_agents_packets: Optional[StrictStr] = None
    dhcp_relay_hop_count: Optional[StrictInt] = None
    dhcp_relay_max_size: Optional[StrictInt] = None
    dhcp_relay_port: Optional[StrictInt] = None
    dhcp_relay_server_1: Optional[StrictStr] = None
    dhcp_relay_server_2: Optional[StrictStr] = None
    dhcp_relay_server_3: Optional[StrictStr] = None
    dhcp_relay_server_4: Optional[StrictStr] = None
    dhcp_relay_server_5: Optional[StrictStr] = None
    dhcpd_hostfile_update: Optional[StrictBool] = None
    dhcpd_use_dnsmasq: Optional[StrictBool] = None
    dnsmasq_all_servers: Optional[StrictBool] = None
    echo_server: Optional[StrictStr] = None
    firewall_guest_default_log: Optional[StrictBool] = None
    firewall_lan_default_log: Optional[StrictBool] = None
    firewall_wan_default_log: Optional[StrictBool] = None
    ftp_module: Optional[StrictBool] = None
    geo_ip_filtering_block: Optional[StrictStr] = None
    geo_ip_filtering_countries: Optional[StrictStr] = None
    geo_ip_filtering_enabled: Optional[StrictBool] = None
    geo_ip_filtering_traffic_direction: Optional[StrictStr] = None
    gre_module: Optional[StrictBool] = None
    h323_module: Optional[StrictBool] = None
    icmp_timeout: Optional[StrictInt] = None
    key: Optional[StrictStr] = None
    lldp_enable_all: Optional[StrictBool] = None
    mdns_enabled: Optional[StrictBool] = None
    mss_clamp: Optional[StrictStr] = None
    mss_clamp_mss: Optional[StrictInt] = None
    offload_accounting: Optional[StrictBool] = None
    offload_l2_blocking: Optional[StrictBool] = None
    offload_sch: Optional[StrictBool] = None
    other_timeout: Optional[StrictInt] = None
    pptp_module: Optional[StrictBool] = None
    receive_redirects: Optional[StrictBool] = None
    send_redirects: Optional[StrictBool] = None
    sip_module: Optional[StrictBool] = None
    site_id: Optional[StrictStr] = None
    syn_cookies: Optional[StrictBool] = None
    tcp_close_timeout: Optional[StrictInt] = None
    tcp_close_wait_timeout: Optional[StrictInt] = None
    tcp_established_timeout: Optional[StrictInt] = None
    tcp_fin_wait_timeout: Optional[StrictInt] = None
    tcp_last_ack_timeout: Optional[StrictInt] = None
    tcp_syn_recv_timeout: Optional[StrictInt] = None
    tcp_syn_sent_timeout: Optional[StrictInt] = None
    tcp_time_wait_timeout: Optional[StrictInt] = None
    tftp_module: Optional[StrictBool] = None
    timeout_setting_preference: Optional[StrictStr] = None
    udp_other_timeout: Optional[StrictInt] = None
    udp_stream_timeout: Optional[StrictInt] = None
    upnp_enabled: Optional[StrictBool] = None
    upnp_nat_pmp_enabled: Optional[StrictBool] = None
    upnp_secure_mode: Optional[StrictBool] = None
    upnp_wan_interface: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_id", "arp_cache_base_reachable", "arp_cache_timeout", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "broadcast_ping", "dhcp_relay_agents_packets", "dhcp_relay_hop_count", "dhcp_relay_max_size", "dhcp_relay_port", "dhcp_relay_server_1", "dhcp_relay_server_2", "dhcp_relay_server_3", "dhcp_relay_server_4", "dhcp_relay_server_5", "dhcpd_hostfile_update", "dhcpd_use_dnsmasq", "dnsmasq_all_servers", "echo_server", "firewall_guest_default_log", "firewall_lan_default_log", "firewall_wan_default_log", "ftp_module", "geo_ip_filtering_block", "geo_ip_filtering_countries", "geo_ip_filtering_enabled", "geo_ip_filtering_traffic_direction", "gre_module", "h323_module", "icmp_timeout", "key", "lldp_enable_all", "mdns_enabled", "mss_clamp", "mss_clamp_mss", "offload_accounting", "offload_l2_blocking", "offload_sch", "other_timeout", "pptp_module", "receive_redirects", "send_redirects", "sip_module", "site_id", "syn_cookies", "tcp_close_timeout", "tcp_close_wait_timeout", "tcp_established_timeout", "tcp_fin_wait_timeout", "tcp_last_ack_timeout", "tcp_syn_recv_timeout", "tcp_syn_sent_timeout", "tcp_time_wait_timeout", "tftp_module", "timeout_setting_preference", "udp_other_timeout", "udp_stream_timeout", "upnp_enabled", "upnp_nat_pmp_enabled", "upnp_secure_mode", "upnp_wan_interface"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SettingUsg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SettingUsg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "arp_cache_base_reachable": obj.get("arp_cache_base_reachable"),
            "arp_cache_timeout": obj.get("arp_cache_timeout"),
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "broadcast_ping": obj.get("broadcast_ping"),
            "dhcp_relay_agents_packets": obj.get("dhcp_relay_agents_packets"),
            "dhcp_relay_hop_count": obj.get("dhcp_relay_hop_count"),
            "dhcp_relay_max_size": obj.get("dhcp_relay_max_size"),
            "dhcp_relay_port": obj.get("dhcp_relay_port"),
            "dhcp_relay_server_1": obj.get("dhcp_relay_server_1"),
            "dhcp_relay_server_2": obj.get("dhcp_relay_server_2"),
            "dhcp_relay_server_3": obj.get("dhcp_relay_server_3"),
            "dhcp_relay_server_4": obj.get("dhcp_relay_server_4"),
            "dhcp_relay_server_5": obj.get("dhcp_relay_server_5"),
            "dhcpd_hostfile_update": obj.get("dhcpd_hostfile_update"),
            "dhcpd_use_dnsmasq": obj.get("dhcpd_use_dnsmasq"),
            "dnsmasq_all_servers": obj.get("dnsmasq_all_servers"),
            "echo_server": obj.get("echo_server"),
            "firewall_guest_default_log": obj.get("firewall_guest_default_log"),
            "firewall_lan_default_log": obj.get("firewall_lan_default_log"),
            "firewall_wan_default_log": obj.get("firewall_wan_default_log"),
            "ftp_module": obj.get("ftp_module"),
            "geo_ip_filtering_block": obj.get("geo_ip_filtering_block"),
            "geo_ip_filtering_countries": obj.get("geo_ip_filtering_countries"),
            "geo_ip_filtering_enabled": obj.get("geo_ip_filtering_enabled"),
            "geo_ip_filtering_traffic_direction": obj.get("geo_ip_filtering_traffic_direction"),
            "gre_module": obj.get("gre_module"),
            "h323_module": obj.get("h323_module"),
            "icmp_timeout": obj.get("icmp_timeout"),
            "key": obj.get("key"),
            "lldp_enable_all": obj.get("lldp_enable_all"),
            "mdns_enabled": obj.get("mdns_enabled"),
            "mss_clamp": obj.get("mss_clamp"),
            "mss_clamp_mss": obj.get("mss_clamp_mss"),
            "offload_accounting": obj.get("offload_accounting"),
            "offload_l2_blocking": obj.get("offload_l2_blocking"),
            "offload_sch": obj.get("offload_sch"),
            "other_timeout": obj.get("other_timeout"),
            "pptp_module": obj.get("pptp_module"),
            "receive_redirects": obj.get("receive_redirects"),
            "send_redirects": obj.get("send_redirects"),
            "sip_module": obj.get("sip_module"),
            "site_id": obj.get("site_id"),
            "syn_cookies": obj.get("syn_cookies"),
            "tcp_close_timeout": obj.get("tcp_close_timeout"),
            "tcp_close_wait_timeout": obj.get("tcp_close_wait_timeout"),
            "tcp_established_timeout": obj.get("tcp_established_timeout"),
            "tcp_fin_wait_timeout": obj.get("tcp_fin_wait_timeout"),
            "tcp_last_ack_timeout": obj.get("tcp_last_ack_timeout"),
            "tcp_syn_recv_timeout": obj.get("tcp_syn_recv_timeout"),
            "tcp_syn_sent_timeout": obj.get("tcp_syn_sent_timeout"),
            "tcp_time_wait_timeout": obj.get("tcp_time_wait_timeout"),
            "tftp_module": obj.get("tftp_module"),
            "timeout_setting_preference": obj.get("timeout_setting_preference"),
            "udp_other_timeout": obj.get("udp_other_timeout"),
            "udp_stream_timeout": obj.get("udp_stream_timeout"),
            "upnp_enabled": obj.get("upnp_enabled"),
            "upnp_nat_pmp_enabled": obj.get("upnp_nat_pmp_enabled"),
            "upnp_secure_mode": obj.get("upnp_secure_mode"),
            "upnp_wan_interface": obj.get("upnp_wan_interface")
        })
        return _obj


