# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from unifi_client.models.device_config_network import DeviceConfigNetwork
from unifi_client.models.device_connected_battery_overrides import DeviceConnectedBatteryOverrides
from unifi_client.models.device_ether_lighting import DeviceEtherLighting
from unifi_client.models.device_ethernet_overrides import DeviceEthernetOverrides
from unifi_client.models.device_outlet_overrides import DeviceOutletOverrides
from unifi_client.models.device_port_overrides import DevicePortOverrides
from unifi_client.models.device_radio_table import DeviceRadioTable
from unifi_client.models.device_rps_override import DeviceRpsOverride
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DeviceUpdateRequest(BaseModel):
    """
    DeviceUpdateRequest
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    adopted: Optional[StrictBool] = None
    atf_enabled: Optional[StrictBool] = None
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    bandsteering_mode: Optional[StrictStr] = None
    baresip_auth_user: Optional[StrictStr] = None
    baresip_enabled: Optional[StrictBool] = None
    baresip_extension: Optional[StrictStr] = None
    config_network: Optional[DeviceConfigNetwork] = None
    connected_battery_overrides: Optional[List[DeviceConnectedBatteryOverrides]] = None
    disabled: Optional[StrictBool] = None
    dot1x_fallback_networkconf_id: Optional[StrictStr] = None
    dot1x_portctrl_enabled: Optional[StrictBool] = None
    dpi_enabled: Optional[StrictBool] = None
    ether_lighting: Optional[DeviceEtherLighting] = None
    ethernet_overrides: Optional[List[DeviceEthernetOverrides]] = None
    flowctrl_enabled: Optional[StrictBool] = None
    gateway_vrrp_mode: Optional[StrictStr] = None
    gateway_vrrp_priority: Optional[StrictInt] = None
    height_in_meters: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="heightInMeters")
    hostname: Optional[StrictStr] = None
    jumboframe_enabled: Optional[StrictBool] = None
    lcm_brightness: Optional[StrictInt] = None
    lcm_brightness_override: Optional[StrictBool] = None
    lcm_idle_timeout: Optional[StrictInt] = None
    lcm_idle_timeout_override: Optional[StrictBool] = None
    lcm_night_mode_begins: Optional[StrictStr] = None
    lcm_night_mode_ends: Optional[StrictStr] = None
    lcm_settings_restricted_access: Optional[StrictBool] = None
    lcm_tracker_enabled: Optional[StrictBool] = None
    lcm_tracker_seed: Optional[StrictStr] = None
    led_override: Optional[StrictStr] = None
    led_override_color: Optional[StrictStr] = None
    led_override_color_brightness: Optional[StrictInt] = None
    locked: Optional[StrictBool] = None
    lowpfmode_override: Optional[StrictBool] = None
    lte_apn: Optional[StrictStr] = None
    lte_auth_type: Optional[StrictStr] = None
    lte_data_limit_enabled: Optional[StrictBool] = None
    lte_data_warning_enabled: Optional[StrictBool] = None
    lte_ext_ant: Optional[StrictBool] = None
    lte_hard_limit: Optional[StrictInt] = None
    lte_password: Optional[StrictStr] = None
    lte_poe: Optional[StrictBool] = None
    lte_roaming_allowed: Optional[StrictBool] = None
    lte_sim_pin: Optional[StrictInt] = None
    lte_soft_limit: Optional[StrictInt] = None
    lte_username: Optional[StrictStr] = None
    mac: Optional[StrictStr] = None
    map_id: Optional[StrictStr] = None
    mesh_sta_vap_enabled: Optional[StrictBool] = None
    mgmt_network_id: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    outdoor_mode_override: Optional[StrictStr] = None
    outlet_enabled: Optional[StrictBool] = None
    outlet_overrides: Optional[List[DeviceOutletOverrides]] = None
    outlet_power_cycle_enabled: Optional[StrictBool] = None
    port_overrides: Optional[List[DevicePortOverrides]] = None
    power_source_ctrl: Optional[StrictStr] = None
    power_source_ctrl_budget: Optional[StrictInt] = None
    power_source_ctrl_enabled: Optional[StrictBool] = None
    radio_table: Optional[List[DeviceRadioTable]] = None
    radiusprofile_id: Optional[StrictStr] = None
    resetbtn_enabled: Optional[StrictStr] = None
    rps_override: Optional[DeviceRpsOverride] = None
    site_id: Optional[StrictStr] = None
    snmp_contact: Optional[StrictStr] = None
    snmp_location: Optional[StrictStr] = None
    state: Optional[StrictInt] = None
    stp_priority: Optional[StrictStr] = None
    stp_version: Optional[StrictStr] = None
    switch_vlan_enabled: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    ubb_pair_name: Optional[StrictStr] = None
    volume: Optional[StrictInt] = None
    x: Optional[Union[StrictFloat, StrictInt]] = None
    x_baresip_password: Optional[StrictStr] = None
    y: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["_id", "adopted", "atf_enabled", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "bandsteering_mode", "baresip_auth_user", "baresip_enabled", "baresip_extension", "config_network", "connected_battery_overrides", "disabled", "dot1x_fallback_networkconf_id", "dot1x_portctrl_enabled", "dpi_enabled", "ether_lighting", "ethernet_overrides", "flowctrl_enabled", "gateway_vrrp_mode", "gateway_vrrp_priority", "heightInMeters", "hostname", "jumboframe_enabled", "lcm_brightness", "lcm_brightness_override", "lcm_idle_timeout", "lcm_idle_timeout_override", "lcm_night_mode_begins", "lcm_night_mode_ends", "lcm_settings_restricted_access", "lcm_tracker_enabled", "lcm_tracker_seed", "led_override", "led_override_color", "led_override_color_brightness", "locked", "lowpfmode_override", "lte_apn", "lte_auth_type", "lte_data_limit_enabled", "lte_data_warning_enabled", "lte_ext_ant", "lte_hard_limit", "lte_password", "lte_poe", "lte_roaming_allowed", "lte_sim_pin", "lte_soft_limit", "lte_username", "mac", "map_id", "mesh_sta_vap_enabled", "mgmt_network_id", "model", "name", "outdoor_mode_override", "outlet_enabled", "outlet_overrides", "outlet_power_cycle_enabled", "port_overrides", "power_source_ctrl", "power_source_ctrl_budget", "power_source_ctrl_enabled", "radio_table", "radiusprofile_id", "resetbtn_enabled", "rps_override", "site_id", "snmp_contact", "snmp_location", "state", "stp_priority", "stp_version", "switch_vlan_enabled", "type", "ubb_pair_name", "volume", "x", "x_baresip_password", "y"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DeviceUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config_network
        if self.config_network:
            _dict['config_network'] = self.config_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in connected_battery_overrides (list)
        _items = []
        if self.connected_battery_overrides:
            for _item in self.connected_battery_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['connected_battery_overrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of ether_lighting
        if self.ether_lighting:
            _dict['ether_lighting'] = self.ether_lighting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ethernet_overrides (list)
        _items = []
        if self.ethernet_overrides:
            for _item in self.ethernet_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ethernet_overrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outlet_overrides (list)
        _items = []
        if self.outlet_overrides:
            for _item in self.outlet_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outlet_overrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in port_overrides (list)
        _items = []
        if self.port_overrides:
            for _item in self.port_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['port_overrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in radio_table (list)
        _items = []
        if self.radio_table:
            for _item in self.radio_table:
                if _item:
                    _items.append(_item.to_dict())
            _dict['radio_table'] = _items
        # override the default output from pydantic by calling `to_dict()` of rps_override
        if self.rps_override:
            _dict['rps_override'] = self.rps_override.to_dict()
        # set to None if port_overrides (nullable) is None
        # and model_fields_set contains the field
        if self.port_overrides is None and "port_overrides" in self.model_fields_set:
            _dict['port_overrides'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DeviceUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "adopted": obj.get("adopted"),
            "atf_enabled": obj.get("atf_enabled"),
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "bandsteering_mode": obj.get("bandsteering_mode"),
            "baresip_auth_user": obj.get("baresip_auth_user"),
            "baresip_enabled": obj.get("baresip_enabled"),
            "baresip_extension": obj.get("baresip_extension"),
            "config_network": DeviceConfigNetwork.from_dict(obj.get("config_network")) if obj.get("config_network") is not None else None,
            "connected_battery_overrides": [DeviceConnectedBatteryOverrides.from_dict(_item) for _item in obj.get("connected_battery_overrides")] if obj.get("connected_battery_overrides") is not None else None,
            "disabled": obj.get("disabled"),
            "dot1x_fallback_networkconf_id": obj.get("dot1x_fallback_networkconf_id"),
            "dot1x_portctrl_enabled": obj.get("dot1x_portctrl_enabled"),
            "dpi_enabled": obj.get("dpi_enabled"),
            "ether_lighting": DeviceEtherLighting.from_dict(obj.get("ether_lighting")) if obj.get("ether_lighting") is not None else None,
            "ethernet_overrides": [DeviceEthernetOverrides.from_dict(_item) for _item in obj.get("ethernet_overrides")] if obj.get("ethernet_overrides") is not None else None,
            "flowctrl_enabled": obj.get("flowctrl_enabled"),
            "gateway_vrrp_mode": obj.get("gateway_vrrp_mode"),
            "gateway_vrrp_priority": obj.get("gateway_vrrp_priority"),
            "heightInMeters": obj.get("heightInMeters"),
            "hostname": obj.get("hostname"),
            "jumboframe_enabled": obj.get("jumboframe_enabled"),
            "lcm_brightness": obj.get("lcm_brightness"),
            "lcm_brightness_override": obj.get("lcm_brightness_override"),
            "lcm_idle_timeout": obj.get("lcm_idle_timeout"),
            "lcm_idle_timeout_override": obj.get("lcm_idle_timeout_override"),
            "lcm_night_mode_begins": obj.get("lcm_night_mode_begins"),
            "lcm_night_mode_ends": obj.get("lcm_night_mode_ends"),
            "lcm_settings_restricted_access": obj.get("lcm_settings_restricted_access"),
            "lcm_tracker_enabled": obj.get("lcm_tracker_enabled"),
            "lcm_tracker_seed": obj.get("lcm_tracker_seed"),
            "led_override": obj.get("led_override"),
            "led_override_color": obj.get("led_override_color"),
            "led_override_color_brightness": obj.get("led_override_color_brightness"),
            "locked": obj.get("locked"),
            "lowpfmode_override": obj.get("lowpfmode_override"),
            "lte_apn": obj.get("lte_apn"),
            "lte_auth_type": obj.get("lte_auth_type"),
            "lte_data_limit_enabled": obj.get("lte_data_limit_enabled"),
            "lte_data_warning_enabled": obj.get("lte_data_warning_enabled"),
            "lte_ext_ant": obj.get("lte_ext_ant"),
            "lte_hard_limit": obj.get("lte_hard_limit"),
            "lte_password": obj.get("lte_password"),
            "lte_poe": obj.get("lte_poe"),
            "lte_roaming_allowed": obj.get("lte_roaming_allowed"),
            "lte_sim_pin": obj.get("lte_sim_pin"),
            "lte_soft_limit": obj.get("lte_soft_limit"),
            "lte_username": obj.get("lte_username"),
            "mac": obj.get("mac"),
            "map_id": obj.get("map_id"),
            "mesh_sta_vap_enabled": obj.get("mesh_sta_vap_enabled"),
            "mgmt_network_id": obj.get("mgmt_network_id"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "outdoor_mode_override": obj.get("outdoor_mode_override"),
            "outlet_enabled": obj.get("outlet_enabled"),
            "outlet_overrides": [DeviceOutletOverrides.from_dict(_item) for _item in obj.get("outlet_overrides")] if obj.get("outlet_overrides") is not None else None,
            "outlet_power_cycle_enabled": obj.get("outlet_power_cycle_enabled"),
            "port_overrides": [DevicePortOverrides.from_dict(_item) for _item in obj.get("port_overrides")] if obj.get("port_overrides") is not None else None,
            "power_source_ctrl": obj.get("power_source_ctrl"),
            "power_source_ctrl_budget": obj.get("power_source_ctrl_budget"),
            "power_source_ctrl_enabled": obj.get("power_source_ctrl_enabled"),
            "radio_table": [DeviceRadioTable.from_dict(_item) for _item in obj.get("radio_table")] if obj.get("radio_table") is not None else None,
            "radiusprofile_id": obj.get("radiusprofile_id"),
            "resetbtn_enabled": obj.get("resetbtn_enabled"),
            "rps_override": DeviceRpsOverride.from_dict(obj.get("rps_override")) if obj.get("rps_override") is not None else None,
            "site_id": obj.get("site_id"),
            "snmp_contact": obj.get("snmp_contact"),
            "snmp_location": obj.get("snmp_location"),
            "state": obj.get("state"),
            "stp_priority": obj.get("stp_priority"),
            "stp_version": obj.get("stp_version"),
            "switch_vlan_enabled": obj.get("switch_vlan_enabled"),
            "type": obj.get("type"),
            "ubb_pair_name": obj.get("ubb_pair_name"),
            "volume": obj.get("volume"),
            "x": obj.get("x"),
            "x_baresip_password": obj.get("x_baresip_password"),
            "y": obj.get("y")
        })
        return _obj


