# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SettingRsyslogd(BaseModel):
    """
    SettingRsyslogd
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    debug: Optional[StrictBool] = None
    enabled: Optional[StrictBool] = None
    ip: Optional[StrictStr] = None
    key: Optional[StrictStr] = None
    netconsole_enabled: Optional[StrictBool] = None
    netconsole_host: Optional[StrictStr] = None
    netconsole_port: Optional[StrictInt] = None
    port: Optional[StrictInt] = None
    site_id: Optional[StrictStr] = None
    this_controller: Optional[StrictBool] = None
    this_controller_encrypted_only: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["_id", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "debug", "enabled", "ip", "key", "netconsole_enabled", "netconsole_host", "netconsole_port", "port", "site_id", "this_controller", "this_controller_encrypted_only"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SettingRsyslogd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SettingRsyslogd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "debug": obj.get("debug"),
            "enabled": obj.get("enabled"),
            "ip": obj.get("ip"),
            "key": obj.get("key"),
            "netconsole_enabled": obj.get("netconsole_enabled"),
            "netconsole_host": obj.get("netconsole_host"),
            "netconsole_port": obj.get("netconsole_port"),
            "port": obj.get("port"),
            "site_id": obj.get("site_id"),
            "this_controller": obj.get("this_controller"),
            "this_controller_encrypted_only": obj.get("this_controller_encrypted_only")
        })
        return _obj


