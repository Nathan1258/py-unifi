# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from openapi_client.models.hotspot2_conf_description import Hotspot2ConfDescription
from openapi_client.models.hotspot2_conf_friendly_name import Hotspot2ConfFriendlyName
from openapi_client.models.hotspot2_conf_icon import Hotspot2ConfIcon
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Hotspot2ConfOsu(BaseModel):
    """
    Hotspot2ConfOsu
    """ # noqa: E501
    description: Optional[List[Hotspot2ConfDescription]] = None
    friendly_name: Optional[List[Hotspot2ConfFriendlyName]] = None
    icon: Optional[List[Hotspot2ConfIcon]] = None
    method_oma_dm: Optional[StrictBool] = None
    method_soap_xml_spp: Optional[StrictBool] = None
    nai: Optional[StrictStr] = None
    nai2: Optional[StrictStr] = None
    operating_class: Optional[StrictStr] = None
    server_uri: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["description", "friendly_name", "icon", "method_oma_dm", "method_soap_xml_spp", "nai", "nai2", "operating_class", "server_uri"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Hotspot2ConfOsu from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in description (list)
        _items = []
        if self.description:
            for _item in self.description:
                if _item:
                    _items.append(_item.to_dict())
            _dict['description'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in friendly_name (list)
        _items = []
        if self.friendly_name:
            for _item in self.friendly_name:
                if _item:
                    _items.append(_item.to_dict())
            _dict['friendly_name'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in icon (list)
        _items = []
        if self.icon:
            for _item in self.icon:
                if _item:
                    _items.append(_item.to_dict())
            _dict['icon'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Hotspot2ConfOsu from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": [Hotspot2ConfDescription.from_dict(_item) for _item in obj.get("description")] if obj.get("description") is not None else None,
            "friendly_name": [Hotspot2ConfFriendlyName.from_dict(_item) for _item in obj.get("friendly_name")] if obj.get("friendly_name") is not None else None,
            "icon": [Hotspot2ConfIcon.from_dict(_item) for _item in obj.get("icon")] if obj.get("icon") is not None else None,
            "method_oma_dm": obj.get("method_oma_dm"),
            "method_soap_xml_spp": obj.get("method_soap_xml_spp"),
            "nai": obj.get("nai"),
            "nai2": obj.get("nai2"),
            "operating_class": obj.get("operating_class"),
            "server_uri": obj.get("server_uri")
        })
        return _obj


