# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.radius_profile_acct_servers import RADIUSProfileAcctServers
from openapi_client.models.radius_profile_auth_servers import RADIUSProfileAuthServers
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RADIUSProfileUpdateRequest(BaseModel):
    """
    RADIUSProfileUpdateRequest
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    accounting_enabled: Optional[StrictBool] = None
    acct_servers: Optional[List[RADIUSProfileAcctServers]] = None
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    auth_servers: Optional[List[RADIUSProfileAuthServers]] = None
    interim_update_enabled: Optional[StrictBool] = None
    interim_update_interval: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    site_id: Optional[StrictStr] = None
    use_usg_acct_server: Optional[StrictBool] = None
    use_usg_auth_server: Optional[StrictBool] = None
    vlan_enabled: Optional[StrictBool] = None
    vlan_wlan_mode: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_id", "accounting_enabled", "acct_servers", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "auth_servers", "interim_update_enabled", "interim_update_interval", "name", "site_id", "use_usg_acct_server", "use_usg_auth_server", "vlan_enabled", "vlan_wlan_mode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RADIUSProfileUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in acct_servers (list)
        _items = []
        if self.acct_servers:
            for _item in self.acct_servers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['acct_servers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in auth_servers (list)
        _items = []
        if self.auth_servers:
            for _item in self.auth_servers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['auth_servers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RADIUSProfileUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "accounting_enabled": obj.get("accounting_enabled"),
            "acct_servers": [RADIUSProfileAcctServers.from_dict(_item) for _item in obj.get("acct_servers")] if obj.get("acct_servers") is not None else None,
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "auth_servers": [RADIUSProfileAuthServers.from_dict(_item) for _item in obj.get("auth_servers")] if obj.get("auth_servers") is not None else None,
            "interim_update_enabled": obj.get("interim_update_enabled"),
            "interim_update_interval": obj.get("interim_update_interval"),
            "name": obj.get("name"),
            "site_id": obj.get("site_id"),
            "use_usg_acct_server": obj.get("use_usg_acct_server"),
            "use_usg_auth_server": obj.get("use_usg_auth_server"),
            "vlan_enabled": obj.get("vlan_enabled"),
            "vlan_wlan_mode": obj.get("vlan_wlan_mode")
        })
        return _obj


