# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FirewallRule(BaseModel):
    """
    FirewallRule
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    action: Optional[StrictStr] = None
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    contiguous: Optional[StrictBool] = None
    dst_address: Optional[StrictStr] = None
    dst_address_ipv6: Optional[StrictStr] = None
    dst_firewallgroup_ids: Optional[List[StrictStr]] = None
    dst_networkconf_id: Optional[StrictStr] = None
    dst_networkconf_type: Optional[StrictStr] = None
    dst_port: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    icmp_typename: Optional[StrictStr] = None
    icmpv6_typename: Optional[StrictStr] = None
    ipsec: Optional[StrictStr] = None
    logging: Optional[StrictBool] = None
    monthdays: Optional[StrictStr] = None
    monthdays_negate: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    protocol: Optional[StrictStr] = None
    protocol_match_excepted: Optional[StrictBool] = None
    protocol_v6: Optional[StrictStr] = None
    rule_index: Optional[StrictInt] = None
    ruleset: Optional[StrictStr] = None
    setting_preference: Optional[StrictStr] = None
    site_id: Optional[StrictStr] = None
    src_address: Optional[StrictStr] = None
    src_address_ipv6: Optional[StrictStr] = None
    src_firewallgroup_ids: Optional[List[StrictStr]] = None
    src_mac_address: Optional[StrictStr] = None
    src_networkconf_id: Optional[StrictStr] = None
    src_networkconf_type: Optional[StrictStr] = None
    src_port: Optional[StrictStr] = None
    startdate: Optional[StrictStr] = None
    starttime: Optional[StrictStr] = None
    state_established: Optional[StrictBool] = None
    state_invalid: Optional[StrictBool] = None
    state_new: Optional[StrictBool] = None
    state_related: Optional[StrictBool] = None
    stopdate: Optional[StrictStr] = None
    stoptime: Optional[StrictStr] = None
    utc: Optional[StrictBool] = None
    weekdays: Optional[StrictStr] = None
    weekdays_negate: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["_id", "action", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "contiguous", "dst_address", "dst_address_ipv6", "dst_firewallgroup_ids", "dst_networkconf_id", "dst_networkconf_type", "dst_port", "enabled", "icmp_typename", "icmpv6_typename", "ipsec", "logging", "monthdays", "monthdays_negate", "name", "protocol", "protocol_match_excepted", "protocol_v6", "rule_index", "ruleset", "setting_preference", "site_id", "src_address", "src_address_ipv6", "src_firewallgroup_ids", "src_mac_address", "src_networkconf_id", "src_networkconf_type", "src_port", "startdate", "starttime", "state_established", "state_invalid", "state_new", "state_related", "stopdate", "stoptime", "utc", "weekdays", "weekdays_negate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FirewallRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FirewallRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "action": obj.get("action"),
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "contiguous": obj.get("contiguous"),
            "dst_address": obj.get("dst_address"),
            "dst_address_ipv6": obj.get("dst_address_ipv6"),
            "dst_firewallgroup_ids": obj.get("dst_firewallgroup_ids"),
            "dst_networkconf_id": obj.get("dst_networkconf_id"),
            "dst_networkconf_type": obj.get("dst_networkconf_type"),
            "dst_port": obj.get("dst_port"),
            "enabled": obj.get("enabled"),
            "icmp_typename": obj.get("icmp_typename"),
            "icmpv6_typename": obj.get("icmpv6_typename"),
            "ipsec": obj.get("ipsec"),
            "logging": obj.get("logging"),
            "monthdays": obj.get("monthdays"),
            "monthdays_negate": obj.get("monthdays_negate"),
            "name": obj.get("name"),
            "protocol": obj.get("protocol"),
            "protocol_match_excepted": obj.get("protocol_match_excepted"),
            "protocol_v6": obj.get("protocol_v6"),
            "rule_index": obj.get("rule_index"),
            "ruleset": obj.get("ruleset"),
            "setting_preference": obj.get("setting_preference"),
            "site_id": obj.get("site_id"),
            "src_address": obj.get("src_address"),
            "src_address_ipv6": obj.get("src_address_ipv6"),
            "src_firewallgroup_ids": obj.get("src_firewallgroup_ids"),
            "src_mac_address": obj.get("src_mac_address"),
            "src_networkconf_id": obj.get("src_networkconf_id"),
            "src_networkconf_type": obj.get("src_networkconf_type"),
            "src_port": obj.get("src_port"),
            "startdate": obj.get("startdate"),
            "starttime": obj.get("starttime"),
            "state_established": obj.get("state_established"),
            "state_invalid": obj.get("state_invalid"),
            "state_new": obj.get("state_new"),
            "state_related": obj.get("state_related"),
            "stopdate": obj.get("stopdate"),
            "stoptime": obj.get("stoptime"),
            "utc": obj.get("utc"),
            "weekdays": obj.get("weekdays"),
            "weekdays_negate": obj.get("weekdays_negate")
        })
        return _obj


