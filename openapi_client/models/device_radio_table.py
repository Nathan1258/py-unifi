# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from openapi_client.models.device_radio_i_dentifiers import DeviceRadioIDentifiers
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DeviceRadioTable(BaseModel):
    """
    DeviceRadioTable
    """ # noqa: E501
    antenna_gain: Optional[StrictInt] = None
    antenna_id: Optional[StrictInt] = None
    backup_channel: Optional[StrictStr] = None
    channel: Optional[StrictStr] = None
    channel_optimization_enabled: Optional[StrictBool] = None
    hard_noise_floor_enabled: Optional[StrictBool] = None
    ht: Optional[StrictInt] = None
    loadbalance_enabled: Optional[StrictBool] = None
    maxsta: Optional[StrictInt] = None
    min_rssi: Optional[StrictInt] = None
    min_rssi_enabled: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    radio: Optional[StrictStr] = None
    radio_identifiers: Optional[List[DeviceRadioIDentifiers]] = None
    sens_level: Optional[StrictInt] = None
    sens_level_enabled: Optional[StrictBool] = None
    tx_power: Optional[StrictStr] = None
    tx_power_mode: Optional[StrictStr] = None
    vwire_enabled: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["antenna_gain", "antenna_id", "backup_channel", "channel", "channel_optimization_enabled", "hard_noise_floor_enabled", "ht", "loadbalance_enabled", "maxsta", "min_rssi", "min_rssi_enabled", "name", "radio", "radio_identifiers", "sens_level", "sens_level_enabled", "tx_power", "tx_power_mode", "vwire_enabled"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DeviceRadioTable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in radio_identifiers (list)
        _items = []
        if self.radio_identifiers:
            for _item in self.radio_identifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['radio_identifiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DeviceRadioTable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "antenna_gain": obj.get("antenna_gain"),
            "antenna_id": obj.get("antenna_id"),
            "backup_channel": obj.get("backup_channel"),
            "channel": obj.get("channel"),
            "channel_optimization_enabled": obj.get("channel_optimization_enabled"),
            "hard_noise_floor_enabled": obj.get("hard_noise_floor_enabled"),
            "ht": obj.get("ht"),
            "loadbalance_enabled": obj.get("loadbalance_enabled"),
            "maxsta": obj.get("maxsta"),
            "min_rssi": obj.get("min_rssi"),
            "min_rssi_enabled": obj.get("min_rssi_enabled"),
            "name": obj.get("name"),
            "radio": obj.get("radio"),
            "radio_identifiers": [DeviceRadioIDentifiers.from_dict(_item) for _item in obj.get("radio_identifiers")] if obj.get("radio_identifiers") is not None else None,
            "sens_level": obj.get("sens_level"),
            "sens_level_enabled": obj.get("sens_level_enabled"),
            "tx_power": obj.get("tx_power"),
            "tx_power_mode": obj.get("tx_power_mode"),
            "vwire_enabled": obj.get("vwire_enabled")
        })
        return _obj


