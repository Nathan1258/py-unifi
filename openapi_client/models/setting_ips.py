# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from openapi_client.models.setting_ips_ad_blocking_configurations import SettingIpsAdBlockingConfigurations
from openapi_client.models.setting_ips_dns_filters import SettingIpsDNSFilters
from openapi_client.models.setting_ips_honeypot import SettingIpsHoneypot
from openapi_client.models.setting_ips_suppression import SettingIpsSuppression
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SettingIps(BaseModel):
    """
    SettingIps
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    ad_blocking_configurations: Optional[List[SettingIpsAdBlockingConfigurations]] = None
    ad_blocking_enabled: Optional[StrictBool] = None
    advanced_filtering_preference: Optional[StrictStr] = None
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    dns_filtering: Optional[StrictBool] = None
    dns_filters: Optional[List[SettingIpsDNSFilters]] = None
    enabled_categories: Optional[List[StrictStr]] = None
    enabled_networks: Optional[List[StrictStr]] = None
    honeypot: Optional[List[SettingIpsHoneypot]] = None
    honeypot_enabled: Optional[StrictBool] = None
    ips_mode: Optional[StrictStr] = None
    key: Optional[StrictStr] = None
    restrict_ip_addresses: Optional[StrictBool] = None
    restrict_tor: Optional[StrictBool] = None
    restrict_torrents: Optional[StrictBool] = None
    site_id: Optional[StrictStr] = None
    suppression: Optional[SettingIpsSuppression] = None
    __properties: ClassVar[List[str]] = ["_id", "ad_blocking_configurations", "ad_blocking_enabled", "advanced_filtering_preference", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "dns_filtering", "dns_filters", "enabled_categories", "enabled_networks", "honeypot", "honeypot_enabled", "ips_mode", "key", "restrict_ip_addresses", "restrict_tor", "restrict_torrents", "site_id", "suppression"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SettingIps from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ad_blocking_configurations (list)
        _items = []
        if self.ad_blocking_configurations:
            for _item in self.ad_blocking_configurations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ad_blocking_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dns_filters (list)
        _items = []
        if self.dns_filters:
            for _item in self.dns_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dns_filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in honeypot (list)
        _items = []
        if self.honeypot:
            for _item in self.honeypot:
                if _item:
                    _items.append(_item.to_dict())
            _dict['honeypot'] = _items
        # override the default output from pydantic by calling `to_dict()` of suppression
        if self.suppression:
            _dict['suppression'] = self.suppression.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SettingIps from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "ad_blocking_configurations": [SettingIpsAdBlockingConfigurations.from_dict(_item) for _item in obj.get("ad_blocking_configurations")] if obj.get("ad_blocking_configurations") is not None else None,
            "ad_blocking_enabled": obj.get("ad_blocking_enabled"),
            "advanced_filtering_preference": obj.get("advanced_filtering_preference"),
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "dns_filtering": obj.get("dns_filtering"),
            "dns_filters": [SettingIpsDNSFilters.from_dict(_item) for _item in obj.get("dns_filters")] if obj.get("dns_filters") is not None else None,
            "enabled_categories": obj.get("enabled_categories"),
            "enabled_networks": obj.get("enabled_networks"),
            "honeypot": [SettingIpsHoneypot.from_dict(_item) for _item in obj.get("honeypot")] if obj.get("honeypot") is not None else None,
            "honeypot_enabled": obj.get("honeypot_enabled"),
            "ips_mode": obj.get("ips_mode"),
            "key": obj.get("key"),
            "restrict_ip_addresses": obj.get("restrict_ip_addresses"),
            "restrict_tor": obj.get("restrict_tor"),
            "restrict_torrents": obj.get("restrict_torrents"),
            "site_id": obj.get("site_id"),
            "suppression": SettingIpsSuppression.from_dict(obj.get("suppression")) if obj.get("suppression") is not None else None
        })
        return _obj


