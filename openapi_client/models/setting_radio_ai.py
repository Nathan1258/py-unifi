# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SettingRadioAi(BaseModel):
    """
    SettingRadioAi
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    auto_adjust_channels_to_country: Optional[StrictBool] = None
    channels_na: Optional[List[StrictInt]] = None
    channels_ng: Optional[List[StrictInt]] = None
    cron_expr: Optional[StrictStr] = None
    default: Optional[StrictBool] = None
    enabled: Optional[StrictBool] = None
    exclude_devices: Optional[List[StrictStr]] = None
    ht_modes_na: Optional[List[StrictInt]] = None
    ht_modes_ng: Optional[List[StrictInt]] = None
    key: Optional[StrictStr] = None
    optimize: Optional[List[StrictStr]] = None
    radios: Optional[List[StrictStr]] = None
    setting_preference: Optional[StrictStr] = None
    site_id: Optional[StrictStr] = None
    use_xy: Optional[StrictBool] = Field(default=None, alias="useXY")
    __properties: ClassVar[List[str]] = ["_id", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "auto_adjust_channels_to_country", "channels_na", "channels_ng", "cron_expr", "default", "enabled", "exclude_devices", "ht_modes_na", "ht_modes_ng", "key", "optimize", "radios", "setting_preference", "site_id", "useXY"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SettingRadioAi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SettingRadioAi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "auto_adjust_channels_to_country": obj.get("auto_adjust_channels_to_country"),
            "channels_na": obj.get("channels_na"),
            "channels_ng": obj.get("channels_ng"),
            "cron_expr": obj.get("cron_expr"),
            "default": obj.get("default"),
            "enabled": obj.get("enabled"),
            "exclude_devices": obj.get("exclude_devices"),
            "ht_modes_na": obj.get("ht_modes_na"),
            "ht_modes_ng": obj.get("ht_modes_ng"),
            "key": obj.get("key"),
            "optimize": obj.get("optimize"),
            "radios": obj.get("radios"),
            "setting_preference": obj.get("setting_preference"),
            "site_id": obj.get("site_id"),
            "useXY": obj.get("useXY")
        })
        return _obj


