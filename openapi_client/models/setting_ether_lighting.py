# coding: utf-8

"""
    Unifi API

    Unifi Controller API

    The version of the OpenAPI document: 8.0.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from openapi_client.models.setting_ether_lighting_network_overrides import SettingEtherLightingNetworkOverrides
from openapi_client.models.setting_ether_lighting_speed_overrides import SettingEtherLightingSpeedOverrides
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SettingEtherLighting(BaseModel):
    """
    SettingEtherLighting
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    attr_hidden: Optional[StrictBool] = None
    attr_hidden_id: Optional[StrictStr] = None
    attr_no_delete: Optional[StrictBool] = None
    attr_no_edit: Optional[StrictBool] = None
    key: Optional[StrictStr] = None
    network_overrides: Optional[List[SettingEtherLightingNetworkOverrides]] = None
    site_id: Optional[StrictStr] = None
    speed_overrides: Optional[List[SettingEtherLightingSpeedOverrides]] = None
    __properties: ClassVar[List[str]] = ["_id", "attr_hidden", "attr_hidden_id", "attr_no_delete", "attr_no_edit", "key", "network_overrides", "site_id", "speed_overrides"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SettingEtherLighting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in network_overrides (list)
        _items = []
        if self.network_overrides:
            for _item in self.network_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['network_overrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in speed_overrides (list)
        _items = []
        if self.speed_overrides:
            for _item in self.speed_overrides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['speed_overrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SettingEtherLighting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "attr_hidden": obj.get("attr_hidden"),
            "attr_hidden_id": obj.get("attr_hidden_id"),
            "attr_no_delete": obj.get("attr_no_delete"),
            "attr_no_edit": obj.get("attr_no_edit"),
            "key": obj.get("key"),
            "network_overrides": [SettingEtherLightingNetworkOverrides.from_dict(_item) for _item in obj.get("network_overrides")] if obj.get("network_overrides") is not None else None,
            "site_id": obj.get("site_id"),
            "speed_overrides": [SettingEtherLightingSpeedOverrides.from_dict(_item) for _item in obj.get("speed_overrides")] if obj.get("speed_overrides") is not None else None
        })
        return _obj


